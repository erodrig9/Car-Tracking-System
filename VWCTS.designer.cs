#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CarTrackingSystem
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="VWCTS")]
	public partial class VWCTSDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertOptional_Package(Optional_Package instance);
    partial void UpdateOptional_Package(Optional_Package instance);
    partial void DeleteOptional_Package(Optional_Package instance);
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    partial void InsertCar_Option(Car_Option instance);
    partial void UpdateCar_Option(Car_Option instance);
    partial void DeleteCar_Option(Car_Option instance);
    partial void InsertCar(Car instance);
    partial void UpdateCar(Car instance);
    partial void DeleteCar(Car instance);
    partial void InsertHistory(History instance);
    partial void UpdateHistory(History instance);
    partial void DeleteHistory(History instance);
    #endregion
		
		public VWCTSDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["VWCTSConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public VWCTSDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VWCTSDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VWCTSDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VWCTSDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Trim> Trims
		{
			get
			{
				return this.GetTable<Trim>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Optional_Package> Optional_Packages
		{
			get
			{
				return this.GetTable<Optional_Package>();
			}
		}
		
		public System.Data.Linq.Table<Photo> Photos
		{
			get
			{
				return this.GetTable<Photo>();
			}
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
		
		public System.Data.Linq.Table<Car_Option> Car_Options
		{
			get
			{
				return this.GetTable<Car_Option>();
			}
		}
		
		public System.Data.Linq.Table<Car> Cars
		{
			get
			{
				return this.GetTable<Car>();
			}
		}
		
		public System.Data.Linq.Table<History> Histories
		{
			get
			{
				return this.GetTable<History>();
			}
		}
		
		[Function(Name="dbo.Update_Miles")]
		public int Update_Miles([Parameter(DbType="Int")] System.Nullable<int> id, [Parameter(DbType="Int")] System.Nullable<int> m)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, m);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Update_Customer")]
		public int Update_Customer([Parameter(Name="ID", DbType="Int")] System.Nullable<int> iD, [Parameter(Name="First", DbType="NVarChar(50)")] string first, [Parameter(Name="Last", DbType="NVarChar(50)")] string last, [Parameter(Name="Area", DbType="Int")] System.Nullable<int> area, [Parameter(Name="Phone", DbType="Int")] System.Nullable<int> phone, [Parameter(Name="Street", DbType="NVarChar(50)")] string street, [Parameter(Name="City", DbType="NVarChar(50)")] string city, [Parameter(Name="State", DbType="NVarChar(50)")] string state, [Parameter(Name="Zip", DbType="Int")] System.Nullable<int> zip)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, first, last, area, phone, street, city, state, zip);
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Trim")]
	public partial class Trim
	{
		
		private string _Model;
		
		private string _Trim1;
		
		public Trim()
		{
		}
		
		[Column(Storage="_Model", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this._Model = value;
				}
			}
		}
		
		[Column(Name="Trim", Storage="_Trim1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Trim1
		{
			get
			{
				return this._Trim1;
			}
			set
			{
				if ((this._Trim1 != value))
				{
					this._Trim1 = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Customer_ID;
		
		private string _First_Name;
		
		private string _Last_Name;
		
		private System.Nullable<int> _Area_Code;
		
		private int _Phone_Number;
		
		private string _Street_Number;
		
		private string _City;
		
		private string _State;
		
		private int _Zip_Code;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntitySet<History> _Histories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomer_IDChanging(int value);
    partial void OnCustomer_IDChanged();
    partial void OnFirst_NameChanging(string value);
    partial void OnFirst_NameChanged();
    partial void OnLast_NameChanging(string value);
    partial void OnLast_NameChanged();
    partial void OnArea_CodeChanging(System.Nullable<int> value);
    partial void OnArea_CodeChanged();
    partial void OnPhone_NumberChanging(int value);
    partial void OnPhone_NumberChanged();
    partial void OnStreet_NumberChanging(string value);
    partial void OnStreet_NumberChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZip_CodeChanging(int value);
    partial void OnZip_CodeChanged();
    #endregion
		
		public Customer()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._Histories = new EntitySet<History>(new Action<History>(this.attach_Histories), new Action<History>(this.detach_Histories));
			OnCreated();
		}
		
		[Column(Storage="_Customer_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[Column(Storage="_First_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string First_Name
		{
			get
			{
				return this._First_Name;
			}
			set
			{
				if ((this._First_Name != value))
				{
					this.OnFirst_NameChanging(value);
					this.SendPropertyChanging();
					this._First_Name = value;
					this.SendPropertyChanged("First_Name");
					this.OnFirst_NameChanged();
				}
			}
		}
		
		[Column(Storage="_Last_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Last_Name
		{
			get
			{
				return this._Last_Name;
			}
			set
			{
				if ((this._Last_Name != value))
				{
					this.OnLast_NameChanging(value);
					this.SendPropertyChanging();
					this._Last_Name = value;
					this.SendPropertyChanged("Last_Name");
					this.OnLast_NameChanged();
				}
			}
		}
		
		[Column(Storage="_Area_Code", DbType="Int")]
		public System.Nullable<int> Area_Code
		{
			get
			{
				return this._Area_Code;
			}
			set
			{
				if ((this._Area_Code != value))
				{
					this.OnArea_CodeChanging(value);
					this.SendPropertyChanging();
					this._Area_Code = value;
					this.SendPropertyChanged("Area_Code");
					this.OnArea_CodeChanged();
				}
			}
		}
		
		[Column(Storage="_Phone_Number", DbType="Int NOT NULL")]
		public int Phone_Number
		{
			get
			{
				return this._Phone_Number;
			}
			set
			{
				if ((this._Phone_Number != value))
				{
					this.OnPhone_NumberChanging(value);
					this.SendPropertyChanging();
					this._Phone_Number = value;
					this.SendPropertyChanged("Phone_Number");
					this.OnPhone_NumberChanged();
				}
			}
		}
		
		[Column(Storage="_Street_Number", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Street_Number
		{
			get
			{
				return this._Street_Number;
			}
			set
			{
				if ((this._Street_Number != value))
				{
					this.OnStreet_NumberChanging(value);
					this.SendPropertyChanging();
					this._Street_Number = value;
					this.SendPropertyChanged("Street_Number");
					this.OnStreet_NumberChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_Zip_Code", DbType="Int NOT NULL")]
		public int Zip_Code
		{
			get
			{
				return this._Zip_Code;
			}
			set
			{
				if ((this._Zip_Code != value))
				{
					this.OnZip_CodeChanging(value);
					this.SendPropertyChanging();
					this._Zip_Code = value;
					this.SendPropertyChanged("Zip_Code");
					this.OnZip_CodeChanged();
				}
			}
		}
		
		[Association(Name="Customer_Transaction", Storage="_Transactions", ThisKey="Customer_ID", OtherKey="Customer_ID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[Association(Name="Customer_History", Storage="_Histories", ThisKey="Customer_ID", OtherKey="Customer_ID")]
		public EntitySet<History> Histories
		{
			get
			{
				return this._Histories;
			}
			set
			{
				this._Histories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[Table(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Employee_ID;
		
		private string _Department;
		
		private string _First_Name;
		
		private string _Last_Name;
		
		private System.Nullable<int> _Area_Code;
		
		private int _Phone_Number;
		
		private string _Street_Number;
		
		private string _City;
		
		private string _State;
		
		private int _Zip_Code;
		
		private string _User_Name;
		
		private string _Password;
		
		private EntitySet<Transaction> _Transactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployee_IDChanging(int value);
    partial void OnEmployee_IDChanged();
    partial void OnDepartmentChanging(string value);
    partial void OnDepartmentChanged();
    partial void OnFirst_NameChanging(string value);
    partial void OnFirst_NameChanged();
    partial void OnLast_NameChanging(string value);
    partial void OnLast_NameChanged();
    partial void OnArea_CodeChanging(System.Nullable<int> value);
    partial void OnArea_CodeChanged();
    partial void OnPhone_NumberChanging(int value);
    partial void OnPhone_NumberChanged();
    partial void OnStreet_NumberChanging(string value);
    partial void OnStreet_NumberChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZip_CodeChanging(int value);
    partial void OnZip_CodeChanged();
    partial void OnUser_NameChanging(string value);
    partial void OnUser_NameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Employee()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			OnCreated();
		}
		
		[Column(Storage="_Employee_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Employee_ID
		{
			get
			{
				return this._Employee_ID;
			}
			set
			{
				if ((this._Employee_ID != value))
				{
					this.OnEmployee_IDChanging(value);
					this.SendPropertyChanging();
					this._Employee_ID = value;
					this.SendPropertyChanged("Employee_ID");
					this.OnEmployee_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Department", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Department
		{
			get
			{
				return this._Department;
			}
			set
			{
				if ((this._Department != value))
				{
					this.OnDepartmentChanging(value);
					this.SendPropertyChanging();
					this._Department = value;
					this.SendPropertyChanged("Department");
					this.OnDepartmentChanged();
				}
			}
		}
		
		[Column(Storage="_First_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string First_Name
		{
			get
			{
				return this._First_Name;
			}
			set
			{
				if ((this._First_Name != value))
				{
					this.OnFirst_NameChanging(value);
					this.SendPropertyChanging();
					this._First_Name = value;
					this.SendPropertyChanged("First_Name");
					this.OnFirst_NameChanged();
				}
			}
		}
		
		[Column(Storage="_Last_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Last_Name
		{
			get
			{
				return this._Last_Name;
			}
			set
			{
				if ((this._Last_Name != value))
				{
					this.OnLast_NameChanging(value);
					this.SendPropertyChanging();
					this._Last_Name = value;
					this.SendPropertyChanged("Last_Name");
					this.OnLast_NameChanged();
				}
			}
		}
		
		[Column(Storage="_Area_Code", DbType="Int")]
		public System.Nullable<int> Area_Code
		{
			get
			{
				return this._Area_Code;
			}
			set
			{
				if ((this._Area_Code != value))
				{
					this.OnArea_CodeChanging(value);
					this.SendPropertyChanging();
					this._Area_Code = value;
					this.SendPropertyChanged("Area_Code");
					this.OnArea_CodeChanged();
				}
			}
		}
		
		[Column(Storage="_Phone_Number", DbType="Int NOT NULL")]
		public int Phone_Number
		{
			get
			{
				return this._Phone_Number;
			}
			set
			{
				if ((this._Phone_Number != value))
				{
					this.OnPhone_NumberChanging(value);
					this.SendPropertyChanging();
					this._Phone_Number = value;
					this.SendPropertyChanged("Phone_Number");
					this.OnPhone_NumberChanged();
				}
			}
		}
		
		[Column(Storage="_Street_Number", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Street_Number
		{
			get
			{
				return this._Street_Number;
			}
			set
			{
				if ((this._Street_Number != value))
				{
					this.OnStreet_NumberChanging(value);
					this.SendPropertyChanging();
					this._Street_Number = value;
					this.SendPropertyChanged("Street_Number");
					this.OnStreet_NumberChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_Zip_Code", DbType="Int NOT NULL")]
		public int Zip_Code
		{
			get
			{
				return this._Zip_Code;
			}
			set
			{
				if ((this._Zip_Code != value))
				{
					this.OnZip_CodeChanging(value);
					this.SendPropertyChanging();
					this._Zip_Code = value;
					this.SendPropertyChanged("Zip_Code");
					this.OnZip_CodeChanged();
				}
			}
		}
		
		[Column(Storage="_User_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string User_Name
		{
			get
			{
				return this._User_Name;
			}
			set
			{
				if ((this._User_Name != value))
				{
					this.OnUser_NameChanging(value);
					this.SendPropertyChanging();
					this._User_Name = value;
					this.SendPropertyChanged("User_Name");
					this.OnUser_NameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Association(Name="Employee_Transaction", Storage="_Transactions", ThisKey="Employee_ID", OtherKey="Employee_ID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[Table(Name="dbo.Optional_Packages")]
	public partial class Optional_Package : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Package_ID;
		
		private string _Model;
		
		private string _Trim;
		
		private string _Option_Name;
		
		private string _Description;
		
		private EntitySet<Car_Option> _Car_Options;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPackage_IDChanging(int value);
    partial void OnPackage_IDChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnTrimChanging(string value);
    partial void OnTrimChanged();
    partial void OnOption_NameChanging(string value);
    partial void OnOption_NameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Optional_Package()
		{
			this._Car_Options = new EntitySet<Car_Option>(new Action<Car_Option>(this.attach_Car_Options), new Action<Car_Option>(this.detach_Car_Options));
			OnCreated();
		}
		
		[Column(Storage="_Package_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Package_ID
		{
			get
			{
				return this._Package_ID;
			}
			set
			{
				if ((this._Package_ID != value))
				{
					this.OnPackage_IDChanging(value);
					this.SendPropertyChanging();
					this._Package_ID = value;
					this.SendPropertyChanged("Package_ID");
					this.OnPackage_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Model", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[Column(Storage="_Trim", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Trim
		{
			get
			{
				return this._Trim;
			}
			set
			{
				if ((this._Trim != value))
				{
					this.OnTrimChanging(value);
					this.SendPropertyChanging();
					this._Trim = value;
					this.SendPropertyChanged("Trim");
					this.OnTrimChanged();
				}
			}
		}
		
		[Column(Storage="_Option_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Option_Name
		{
			get
			{
				return this._Option_Name;
			}
			set
			{
				if ((this._Option_Name != value))
				{
					this.OnOption_NameChanging(value);
					this.SendPropertyChanging();
					this._Option_Name = value;
					this.SendPropertyChanged("Option_Name");
					this.OnOption_NameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Optional_Package_Car_Option", Storage="_Car_Options", ThisKey="Package_ID", OtherKey="Package_ID")]
		public EntitySet<Car_Option> Car_Options
		{
			get
			{
				return this._Car_Options;
			}
			set
			{
				this._Car_Options.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Car_Options(Car_Option entity)
		{
			this.SendPropertyChanging();
			entity.Optional_Package = this;
		}
		
		private void detach_Car_Options(Car_Option entity)
		{
			this.SendPropertyChanging();
			entity.Optional_Package = null;
		}
	}
	
	[Table(Name="dbo.Photo")]
	public partial class Photo
	{
		
		private int _Car_ID;
		
		private System.Data.Linq.Binary _Photo1;
		
		public Photo()
		{
		}
		
		[Column(Storage="_Car_ID", DbType="Int NOT NULL")]
		public int Car_ID
		{
			get
			{
				return this._Car_ID;
			}
			set
			{
				if ((this._Car_ID != value))
				{
					this._Car_ID = value;
				}
			}
		}
		
		[Column(Name="Photo", Storage="_Photo1", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo1
		{
			get
			{
				return this._Photo1;
			}
			set
			{
				if ((this._Photo1 != value))
				{
					this._Photo1 = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.[Transaction]")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Transaction_ID;
		
		private int _Customer_ID;
		
		private int _Employee_ID;
		
		private int _Car_ID;
		
		private System.DateTime _Date;
		
		private decimal _Down_Payment;
		
		private decimal _Amount_Financed;
		
		private decimal _Trade_Value;
		
		private decimal _Sales_Price;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Car> _Car;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransaction_IDChanging(int value);
    partial void OnTransaction_IDChanged();
    partial void OnCustomer_IDChanging(int value);
    partial void OnCustomer_IDChanged();
    partial void OnEmployee_IDChanging(int value);
    partial void OnEmployee_IDChanged();
    partial void OnCar_IDChanging(int value);
    partial void OnCar_IDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnDown_PaymentChanging(decimal value);
    partial void OnDown_PaymentChanged();
    partial void OnAmount_FinancedChanging(decimal value);
    partial void OnAmount_FinancedChanged();
    partial void OnTrade_ValueChanging(decimal value);
    partial void OnTrade_ValueChanged();
    partial void OnSales_PriceChanging(decimal value);
    partial void OnSales_PriceChanged();
    #endregion
		
		public Transaction()
		{
			this._Customer = default(EntityRef<Customer>);
			this._Employee = default(EntityRef<Employee>);
			this._Car = default(EntityRef<Car>);
			OnCreated();
		}
		
		[Column(Storage="_Transaction_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Transaction_ID
		{
			get
			{
				return this._Transaction_ID;
			}
			set
			{
				if ((this._Transaction_ID != value))
				{
					this.OnTransaction_IDChanging(value);
					this.SendPropertyChanging();
					this._Transaction_ID = value;
					this.SendPropertyChanged("Transaction_ID");
					this.OnTransaction_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Customer_ID", DbType="Int NOT NULL")]
		public int Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Employee_ID", DbType="Int NOT NULL")]
		public int Employee_ID
		{
			get
			{
				return this._Employee_ID;
			}
			set
			{
				if ((this._Employee_ID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployee_IDChanging(value);
					this.SendPropertyChanging();
					this._Employee_ID = value;
					this.SendPropertyChanged("Employee_ID");
					this.OnEmployee_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Car_ID", DbType="Int NOT NULL")]
		public int Car_ID
		{
			get
			{
				return this._Car_ID;
			}
			set
			{
				if ((this._Car_ID != value))
				{
					if (this._Car.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCar_IDChanging(value);
					this.SendPropertyChanging();
					this._Car_ID = value;
					this.SendPropertyChanged("Car_ID");
					this.OnCar_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Down_Payment", DbType="Money NOT NULL")]
		public decimal Down_Payment
		{
			get
			{
				return this._Down_Payment;
			}
			set
			{
				if ((this._Down_Payment != value))
				{
					this.OnDown_PaymentChanging(value);
					this.SendPropertyChanging();
					this._Down_Payment = value;
					this.SendPropertyChanged("Down_Payment");
					this.OnDown_PaymentChanged();
				}
			}
		}
		
		[Column(Storage="_Amount_Financed", DbType="Money NOT NULL")]
		public decimal Amount_Financed
		{
			get
			{
				return this._Amount_Financed;
			}
			set
			{
				if ((this._Amount_Financed != value))
				{
					this.OnAmount_FinancedChanging(value);
					this.SendPropertyChanging();
					this._Amount_Financed = value;
					this.SendPropertyChanged("Amount_Financed");
					this.OnAmount_FinancedChanged();
				}
			}
		}
		
		[Column(Storage="_Trade_Value", DbType="Money NOT NULL")]
		public decimal Trade_Value
		{
			get
			{
				return this._Trade_Value;
			}
			set
			{
				if ((this._Trade_Value != value))
				{
					this.OnTrade_ValueChanging(value);
					this.SendPropertyChanging();
					this._Trade_Value = value;
					this.SendPropertyChanged("Trade_Value");
					this.OnTrade_ValueChanged();
				}
			}
		}
		
		[Column(Storage="_Sales_Price", DbType="Money NOT NULL")]
		public decimal Sales_Price
		{
			get
			{
				return this._Sales_Price;
			}
			set
			{
				if ((this._Sales_Price != value))
				{
					this.OnSales_PriceChanging(value);
					this.SendPropertyChanging();
					this._Sales_Price = value;
					this.SendPropertyChanged("Sales_Price");
					this.OnSales_PriceChanged();
				}
			}
		}
		
		[Association(Name="Customer_Transaction", Storage="_Customer", ThisKey="Customer_ID", OtherKey="Customer_ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._Customer_ID = value.Customer_ID;
					}
					else
					{
						this._Customer_ID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[Association(Name="Employee_Transaction", Storage="_Employee", ThisKey="Employee_ID", OtherKey="Employee_ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._Employee_ID = value.Employee_ID;
					}
					else
					{
						this._Employee_ID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="Car_Transaction", Storage="_Car", ThisKey="Car_ID", OtherKey="Car_ID", IsForeignKey=true)]
		public Car Car
		{
			get
			{
				return this._Car.Entity;
			}
			set
			{
				Car previousValue = this._Car.Entity;
				if (((previousValue != value) 
							|| (this._Car.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Car.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Car.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._Car_ID = value.Car_ID;
					}
					else
					{
						this._Car_ID = default(int);
					}
					this.SendPropertyChanged("Car");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Car_Options")]
	public partial class Car_Option : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Car_ID;
		
		private int _Package_ID;
		
		private EntityRef<Optional_Package> _Optional_Package;
		
		private EntityRef<Car> _Car;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCar_IDChanging(int value);
    partial void OnCar_IDChanged();
    partial void OnPackage_IDChanging(int value);
    partial void OnPackage_IDChanged();
    #endregion
		
		public Car_Option()
		{
			this._Optional_Package = default(EntityRef<Optional_Package>);
			this._Car = default(EntityRef<Car>);
			OnCreated();
		}
		
		[Column(Storage="_Car_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Car_ID
		{
			get
			{
				return this._Car_ID;
			}
			set
			{
				if ((this._Car_ID != value))
				{
					if (this._Car.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCar_IDChanging(value);
					this.SendPropertyChanging();
					this._Car_ID = value;
					this.SendPropertyChanged("Car_ID");
					this.OnCar_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Package_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Package_ID
		{
			get
			{
				return this._Package_ID;
			}
			set
			{
				if ((this._Package_ID != value))
				{
					if (this._Optional_Package.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackage_IDChanging(value);
					this.SendPropertyChanging();
					this._Package_ID = value;
					this.SendPropertyChanged("Package_ID");
					this.OnPackage_IDChanged();
				}
			}
		}
		
		[Association(Name="Optional_Package_Car_Option", Storage="_Optional_Package", ThisKey="Package_ID", OtherKey="Package_ID", IsForeignKey=true)]
		public Optional_Package Optional_Package
		{
			get
			{
				return this._Optional_Package.Entity;
			}
			set
			{
				Optional_Package previousValue = this._Optional_Package.Entity;
				if (((previousValue != value) 
							|| (this._Optional_Package.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Optional_Package.Entity = null;
						previousValue.Car_Options.Remove(this);
					}
					this._Optional_Package.Entity = value;
					if ((value != null))
					{
						value.Car_Options.Add(this);
						this._Package_ID = value.Package_ID;
					}
					else
					{
						this._Package_ID = default(int);
					}
					this.SendPropertyChanged("Optional_Package");
				}
			}
		}
		
		[Association(Name="Car_Car_Option", Storage="_Car", ThisKey="Car_ID", OtherKey="Car_ID", IsForeignKey=true)]
		public Car Car
		{
			get
			{
				return this._Car.Entity;
			}
			set
			{
				Car previousValue = this._Car.Entity;
				if (((previousValue != value) 
							|| (this._Car.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Car.Entity = null;
						previousValue.Car_Options.Remove(this);
					}
					this._Car.Entity = value;
					if ((value != null))
					{
						value.Car_Options.Add(this);
						this._Car_ID = value.Car_ID;
					}
					else
					{
						this._Car_ID = default(int);
					}
					this.SendPropertyChanged("Car");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Cars")]
	public partial class Car : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Car_ID;
		
		private string _VIN;
		
		private string _Model;
		
		private string _Trim;
		
		private string _Color;
		
		private string _Transmission;
		
		private decimal _Invoice;
		
		private decimal _Price;
		
		private string _Status;
		
		private int _Miles;
		
		private string _Picture;
		
		private string _Location;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntitySet<Car_Option> _Car_Options;
		
		private EntitySet<History> _Histories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCar_IDChanging(int value);
    partial void OnCar_IDChanged();
    partial void OnVINChanging(string value);
    partial void OnVINChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnTrimChanging(string value);
    partial void OnTrimChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnTransmissionChanging(string value);
    partial void OnTransmissionChanged();
    partial void OnInvoiceChanging(decimal value);
    partial void OnInvoiceChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnMilesChanging(int value);
    partial void OnMilesChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    #endregion
		
		public Car()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._Car_Options = new EntitySet<Car_Option>(new Action<Car_Option>(this.attach_Car_Options), new Action<Car_Option>(this.detach_Car_Options));
			this._Histories = new EntitySet<History>(new Action<History>(this.attach_Histories), new Action<History>(this.detach_Histories));
			OnCreated();
		}
		
		[Column(Storage="_Car_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Car_ID
		{
			get
			{
				return this._Car_ID;
			}
			set
			{
				if ((this._Car_ID != value))
				{
					this.OnCar_IDChanging(value);
					this.SendPropertyChanging();
					this._Car_ID = value;
					this.SendPropertyChanged("Car_ID");
					this.OnCar_IDChanged();
				}
			}
		}
		
		[Column(Storage="_VIN", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string VIN
		{
			get
			{
				return this._VIN;
			}
			set
			{
				if ((this._VIN != value))
				{
					this.OnVINChanging(value);
					this.SendPropertyChanging();
					this._VIN = value;
					this.SendPropertyChanged("VIN");
					this.OnVINChanged();
				}
			}
		}
		
		[Column(Storage="_Model", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[Column(Storage="_Trim", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Trim
		{
			get
			{
				return this._Trim;
			}
			set
			{
				if ((this._Trim != value))
				{
					this.OnTrimChanging(value);
					this.SendPropertyChanging();
					this._Trim = value;
					this.SendPropertyChanged("Trim");
					this.OnTrimChanged();
				}
			}
		}
		
		[Column(Storage="_Color", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[Column(Storage="_Transmission", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Transmission
		{
			get
			{
				return this._Transmission;
			}
			set
			{
				if ((this._Transmission != value))
				{
					this.OnTransmissionChanging(value);
					this.SendPropertyChanging();
					this._Transmission = value;
					this.SendPropertyChanged("Transmission");
					this.OnTransmissionChanged();
				}
			}
		}
		
		[Column(Storage="_Invoice", DbType="Money NOT NULL")]
		public decimal Invoice
		{
			get
			{
				return this._Invoice;
			}
			set
			{
				if ((this._Invoice != value))
				{
					this.OnInvoiceChanging(value);
					this.SendPropertyChanging();
					this._Invoice = value;
					this.SendPropertyChanged("Invoice");
					this.OnInvoiceChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Miles", DbType="Int NOT NULL")]
		public int Miles
		{
			get
			{
				return this._Miles;
			}
			set
			{
				if ((this._Miles != value))
				{
					this.OnMilesChanging(value);
					this.SendPropertyChanging();
					this._Miles = value;
					this.SendPropertyChanged("Miles");
					this.OnMilesChanged();
				}
			}
		}
		
		[Column(Storage="_Picture", DbType="NVarChar(50)")]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[Column(Storage="_Location", DbType="NVarChar(50)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[Association(Name="Car_Transaction", Storage="_Transactions", ThisKey="Car_ID", OtherKey="Car_ID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[Association(Name="Car_Car_Option", Storage="_Car_Options", ThisKey="Car_ID", OtherKey="Car_ID")]
		public EntitySet<Car_Option> Car_Options
		{
			get
			{
				return this._Car_Options;
			}
			set
			{
				this._Car_Options.Assign(value);
			}
		}
		
		[Association(Name="Car_History", Storage="_Histories", ThisKey="Car_ID", OtherKey="Car_ID")]
		public EntitySet<History> Histories
		{
			get
			{
				return this._Histories;
			}
			set
			{
				this._Histories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Car = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Car = null;
		}
		
		private void attach_Car_Options(Car_Option entity)
		{
			this.SendPropertyChanging();
			entity.Car = this;
		}
		
		private void detach_Car_Options(Car_Option entity)
		{
			this.SendPropertyChanging();
			entity.Car = null;
		}
		
		private void attach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Car = this;
		}
		
		private void detach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Car = null;
		}
	}
	
	[Table(Name="dbo.History")]
	public partial class History : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _History_ID;
		
		private int _Customer_ID;
		
		private int _Car_ID;
		
		private System.DateTime _Date;
		
		private string _Type;
		
		private string _Description;
		
		private EntityRef<Car> _Car;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHistory_IDChanging(int value);
    partial void OnHistory_IDChanged();
    partial void OnCustomer_IDChanging(int value);
    partial void OnCustomer_IDChanged();
    partial void OnCar_IDChanging(int value);
    partial void OnCar_IDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public History()
		{
			this._Car = default(EntityRef<Car>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[Column(Storage="_History_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int History_ID
		{
			get
			{
				return this._History_ID;
			}
			set
			{
				if ((this._History_ID != value))
				{
					this.OnHistory_IDChanging(value);
					this.SendPropertyChanging();
					this._History_ID = value;
					this.SendPropertyChanged("History_ID");
					this.OnHistory_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Customer_ID", DbType="Int NOT NULL")]
		public int Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Car_ID", DbType="Int NOT NULL")]
		public int Car_ID
		{
			get
			{
				return this._Car_ID;
			}
			set
			{
				if ((this._Car_ID != value))
				{
					if (this._Car.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCar_IDChanging(value);
					this.SendPropertyChanging();
					this._Car_ID = value;
					this.SendPropertyChanged("Car_ID");
					this.OnCar_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Car_History", Storage="_Car", ThisKey="Car_ID", OtherKey="Car_ID", IsForeignKey=true)]
		public Car Car
		{
			get
			{
				return this._Car.Entity;
			}
			set
			{
				Car previousValue = this._Car.Entity;
				if (((previousValue != value) 
							|| (this._Car.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Car.Entity = null;
						previousValue.Histories.Remove(this);
					}
					this._Car.Entity = value;
					if ((value != null))
					{
						value.Histories.Add(this);
						this._Car_ID = value.Car_ID;
					}
					else
					{
						this._Car_ID = default(int);
					}
					this.SendPropertyChanged("Car");
				}
			}
		}
		
		[Association(Name="Customer_History", Storage="_Customer", ThisKey="Customer_ID", OtherKey="Customer_ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Histories.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Histories.Add(this);
						this._Customer_ID = value.Customer_ID;
					}
					else
					{
						this._Customer_ID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
